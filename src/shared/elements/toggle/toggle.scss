// JS: Content toggle 
//
// A simple HTML API way to toggle a content on and off. This is not a module in itself, it's more a JS pattern that can be used by devs anywhere in the project. It's often used in forms, where some sections need to be filled based on conditions.
//
// Styleguide 5.10.

// JS: Content toggle: simple example 
//
// This is a simple example that hides the content on initialisation, then uses a button to reveal and hide it. No special CSS is needed, it's all instantiated on initialisation.
//
// All the config is left as data-types on the content area:
// ```
// <div
//    data-js-toggle
//    data-toggle-button="[data-js-example1-button]" 
//    data-toggle-init-closed>
// </div>
// ```
// Notes on the below example:
// - ``data-js-toggle`` marks the content as needing to initialised and bound by this JS routine
// - ``data-toggle-button`` is the selector of any elements that will trigger the toggling by being clicked.
// - ``data-toggle-init-closed`` Tells the JS that this toggle is closed by default on initialisation. Yes, this means the default state could be to have the content visible if you want.
// - The only thing it toggles in this example is the opacity of the content - even when hidden, it takes up space. 
// - The button gets added closed depending on the toggle state. This has no effect by default, but is there so that your implementations can change/effect the button when the state changes.
// - When the toggle is initialised, it waits a frame and then fires an app event called "toggleReady", along with the JQ object of the toggle content (for identification).
// - When the toggle is toggled, after the transition, it fires an app event called "toggleToggled", along with the JQ object of the toggle content (for identification), and the bolean toggle state.
// - if this toggled content is inside pop-up mark-up, it's not initialised, as it will only need re-initialising once the pop-up has been activated.
// - ``aria-hidden`` status of the content is swapped to improve the accessibilioty experience.
// - For good SEO and progressive fallback, the content is displayed on paload, then when the script initialises, it's measured and hidden as required. This will almost certainly cause a flash of content before it's hidden. You may choose to deal with that in any module you build using this toggle pattern (for instance, note that after initialisation, an event is fired to say that it is ready). There is also an optional CSS class that will hide a toggle until it is initialised and ready (see below).
// - You can also trigger the toggle by sending the content an event, eg ``$('[data-js-toggle]').trigger('toggleAll')``. Useful for triggering from other scripts and external buttons that aren't known at the time of content creation.
//
// markup:
// <button type="button" data-js-example1-button>this button toggles the content</button>
// <div style="background:#fff;padding: 30px;"
//    data-js-toggle
//    data-toggle-button="[data-js-example1-button]" 
//    data-toggle-init-closed>
//    This is the content that is toggled on and off
// </div>
//
// sg-wrapper:
// <div class="Section-Inner Section-Inner--xl" style="padding:20px;text-align:center;background-color:#f9f9f9;">
//     <sg-wrapper-content/>
// </div>
//
// Styleguide 5.10.1.

// JS: Content toggle: toggling height
//
// You can also toggle the height of the content container by adding an extra data-type:
// - ``data-toggle-height`` marks the content as needing to have the height collsapsed as well as the opacity
// - the collapse is done via ``max-height``, make sure your CSS is aware of that.
// - any padding top and bottom is also collapsed.
// - try not to toggle items with top and bottom margins, things get weird. Instead, keep the margins outside of the toggle mark-up (eg in a parent or child container)
//
// ```
// <div
//    data-js-toggle
//    data-toggle-height
//    data-toggle-button="[data-js-example2-button]" 
//    data-toggle-init-closed>
// </div>
// ```
//
// markup:
// <button type="button" data-js-example2-button>this button toggles the content</button>
// <div style="background:#fff;padding: 30px;"
//    data-js-toggle
//    data-toggle-height
//    data-toggle-button="[data-js-example2-button]" 
//    data-toggle-init-closed>
//    This is the content that is toggled on and off
// </div>
//
// sg-wrapper:
// <div class="Section-Inner Section-Inner--xl" style="padding:20px;text-align:center;background-color:#f9f9f9;">
//     <sg-wrapper-content/>
// </div>
//
// Styleguide 5.10.2.

// JS: Content toggle: toggling two containers
//
// You can also toggle a second - opposite - container (eg, you want to toggle between two pieces of information).
// - ``data-toggle-opposite`` is the selector of any elements that will also be toggled, but is in the "opposite" state.
// - ``data-toggle-opposite-height`` marks the opposite content as needing to have the height collsapsed as well as the opacity
//
// ```
// <div data-js-example3-opposite-name-it-yourself>
// </div>
// <div
//    data-js-toggle
//    data-toggle-height
//    data-toggle-button="[data-js-example3-button]" 
//    data-toggle-opposite="[data-js-example3-opposite-name-it-yourself]" 
//    data-toggle-opposite-height
//    data-toggle-init-closed>
// </div>
// ```
//
// markup:
// <button type="button" data-js-example3-button>this button toggles the content</button>
// <div style="padding:30px;text-align:center;background-color:#eeeeff;" data-js-example3-opposite-name-it-yourself>
//    This is the "opposite" content that is toggled in the opposite direction as the main content.
// </div>
// <div style="background:#fff;padding: 30px;"
//    data-js-toggle
//    data-toggle-height
//    data-toggle-button="[data-js-example3-button]" 
//    data-toggle-opposite="[data-js-example3-opposite-name-it-yourself]" 
//    data-toggle-opposite-height
//    data-toggle-init-closed>
//    This is the content that is toggled on and off
// </div>
//
// sg-wrapper:
// <div class="Section-Inner Section-Inner--xl" style="padding:20px;text-align:center;background-color:#f9f9f9;">
//     <sg-wrapper-content/>
// </div>
//
// Styleguide 5.10.3.

// JS: Content toggle: toggling based on radio/checkbox inputs
//
// You can also toggle based on the value of radio buttons/checkboxes
// - ``data-toggle-button`` is still the selector of any/all the radio/checkboxs to check for the state on a "change" event (instead of "click" with a regular element). It could be the same selector on a group of radio buttons, but toggle will only happen if the checked input as the required value (see example below).
// - ``data-toggle-button-value`` should be the value that will trigger the content as "toggled".
//
// ```
// Open <input type="radio" name="example4-radio" value="open" data-js-example4-button />
// Closed <input type="radio" name="example4-radio" value="closed" data-js-example4-button />
// <div
//    data-js-toggle
//    data-toggle-height
//    data-toggle-button="[data-js-example4-button]" 
//    data-toggle-button-value="open" 
//    data-toggle-init-closed>
// </div>
// ```
//
// markup:
// Open <input type="radio" name="example4-radio" value="open" data-js-example4-button />
// Closed <input type="radio" name="example4-radio" value="closed" data-js-example4-button />
// <div style="background:#fff;padding: 30px;"
//    data-js-toggle
//    data-toggle-height
//    data-toggle-button="[data-js-example4-button]" 
//    data-toggle-button-value="open" 
//    data-toggle-init-closed>
//    This is the content that is toggled on and off
// </div>
//
// sg-wrapper:
// <div class="Section-Inner Section-Inner--xl" style="padding:20px;text-align:center;background-color:#f9f9f9;">
//     <sg-wrapper-content/>
// </div>
//
// Styleguide 5.10.4.

// JS: Content toggle: hiding on initialisation
//
// The toggle by default often gives a flash of unstyled content before it's initialised. You can choose to prevent this by adding a class to the content, hiding the content until it's ready.
// - ``.Toggle-Content--fallback`` is a progressive fallback. It sets the opacity of the item to 0, then waits 5s before revealing the element (via CSS animation), unless the element is initialised and gets a "ready" class added to it, in which case it will appear immediately. It does require CSS animations to work, so older browsers will still get a flash of content before initialisation. You could also use ``.Toggle-Opposite--fallback`` on the opposite content if you need it.
//
// markup:
// <button type="button" data-js-example5-button>this button toggles the content</button>
// <div class="Toggle-Content--fallback" style="background:#fff;padding: 30px;"
//    data-js-toggle
//    data-toggle-button="[data-js-example5-button]" 
//    data-toggle-init-closed>
//    This is the content that is toggled on and off
// </div>
//
// sg-wrapper:
// <div class="Section-Inner Section-Inner--xl" style="padding:20px;text-align:center;background-color:#f9f9f9;">
//     <sg-wrapper-content/>
// </div>
//
// Styleguide 5.10.5.

@import "../../base/variables-colors";
@import "../../base/variables-typography";
@import "../../base/variables-breakpoints";
@import "../../base/variables";
@import "../../base/mixins";

$toggle-duration-motion: 300ms;
$toggle-duration-opacity: 300ms;
$max-height: 9999px;

// // styleguide:ignore:start
:root {
    --maxHeight: $max-height;
}
// // styleguide:ignore:end

.Toggle {
    &-Content {
        opacity: 0;
        &--ready {
            //box-shadow: inset 0 0 1px red;
            overflow: hidden;
            opacity: 0;
            &:not(.Toggle-Content--visible) {
                max-height: 0 !important;
                padding-top: 0 !important;
                padding-bottom: 0 !important;
            }
        }
        &--animate {
            transform-origin: 0 0;
            transition: opacity $toggle-duration-opacity, transform $toggle-duration-opacity, max-height $toggle-duration-motion, padding $toggle-duration-motion;
            transition-timing-function: linear !important;
            &:not(.Toggle-Content--visible) {
                transition: opacity 0ms, transform $toggle-duration-opacity, max-height $toggle-duration-motion, padding $toggle-duration-motion;
            }
            @media (prefers-reduced-motion) {
                transition: all 0ms !important;
            }
        }
        &--fallback {
            @include readyFallback('.Toggle-Content--ready');
        }
        &--visible {
            opacity: 1;
            transition-delay: $toggle-duration-motion, $toggle-duration-motion, 0ms, 0ms;
            max-height: $max-height;
            max-height: var(--maxHeight);
        }
    }
    &-Opposite {
        opacity: 0;
        &--ready {
            //box-shadow: inset 0 0 1px blue;
            overflow: hidden;
            opacity: 0;
            &:not(.Toggle-Opposite--visible) {
                max-height: 0 !important;
                padding-top: 0 !important;
                padding-bottom: 0 !important;
            }
        }
        &--animate {
            transform-origin: 0 0;
            transition: opacity $toggle-duration-opacity, transform $toggle-duration-opacity, max-height $toggle-duration-motion, padding $toggle-duration-motion;
            transition-timing-function: linear !important;
            &:not(.Toggle-Opposite--visible) {
                transition: opacity 0ms, transform $toggle-duration-opacity, max-height $toggle-duration-motion, padding $toggle-duration-motion;
            }
            @media (prefers-reduced-motion) {
                transition: all 0ms !important;
            }
        }
        &--fallback {
            @include readyFallback('.Toggle-Opposite--ready');
        }
        &--visible {
            opacity: 1;
            transition-delay: $toggle-duration-motion, $toggle-duration-motion, 0ms, 0ms;
            max-height: $max-height;
            max-height: var(--maxHeight);
        }
    }
}